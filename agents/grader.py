from .agent import Agent
import sys

class Grader(Agent):
		
	def __init__(self, model):
		super().__init__(model)
		self.count = 0
	
	def evaluate(self):
		"""Makes API call to respective LLM model with error handling. Automatically appends request and response to message history.

		Returns:
			str: The .json response generated by the model. The response has the following keys:
				"rubricComponentSatisfied": <'Yes'/'No'>, 
				"explanation": <String explaining why the previous evaluation was given> 
		"""

		response = super().evaluate()

		self.count += 1

		rubricComponentSatisfied = response['rubricComponentSatisfied']
		explanation = response['explanation']

		self.message.append({
			"role": "assistant", 
			"content" : f"My verdict is {rubricComponentSatisfied}. This is because {explanation}"
		})

		return response
	
	def setup_message(self, rubric_component: str, student_response: str, context: str=None):
		"""Updates message array prior to API query to add initial system and user queries.

		Args:
			rubric_component: The rubric component that the grader's evaluation should be based on.
			student_response: The response from the student that the grader should grade.
			context: The context of the question, such as the question itself, or important points that should be clarified for the grader.

		Returns:
			nil
		"""
		initial_message = [
			{"role": "system",
			"content": f"You are a biology grading assistant. Your task is to evaluate student responses to determine if the rubric component is satisfied{', taking into account the information provided to the student in the context section' if context else ''}. You will provide your evaluation in JSON format."},
			{"role": "user",
			"content": f"""
			The rubric component is: '{rubric_component}'.
			The student response is: '{student_response}'.
			{'The context is: ' + f"'{context}'" if context else ''}
			Your job is to carefully read the response and determine if it explicitly expresses that the rubric component is satisfied. If there are no relevant responses, indicate that as well.
			Return your evaluation in JSON format with the following keys:
			"rubricComponentSatisfied": <'Yes'/'No'>
			"explanation": <A string with a few sentences explaining your reasoning>
			Ensure that the property names are enclosed in double quotes.
			Additionally, please consider the following when evaluating the response:
			* Maintain a balanced and confident approach, acknowledging the validity of different perspectives without becoming overly conforming.
			* Justify your evaluation with sound reasoning to avoid getting trapped in an endless feedback loop of contradictory arguments.
			* Express any uncertainty or request clarification if needed, rather than simply flipping to the opposing view.
			"""}
		]
		for dialog in initial_message:
			self.message.append(dialog)

	def add_argument(self, argument: str):
		"""Updates message array to inform the grader of the response made by the other grader.

		Args:
			argument: The argument made by the opposing grader that the grader should take into consideration before revaluating its evaluation. Pass in the original JSON-formatted string which includes a 'rubricComponentSatisfied' and 'explanation' key.
		
		Returns:
			nil
		
		Raises:
			KeyError: In the event that the JSON passed in does not contain the correct keys, or if the keys do not have corresponding values, this error is raised.
		"""

		try:
			rubricComponentSatisfied = argument['rubricComponentSatisfied']
			explanation = argument['explanation']
			if not rubricComponentSatisfied or not explanation:
				raise KeyError
		except KeyError:
			print("JSON not formatted correctly. Ensure that both 'rubricComponentSatisfied' and 'explanation' are keys and have corresponding values.")

		# print(self.message)


		message = [
			{"role": "user",
			"content": f"The other agent argues '{rubricComponentSatisfied}'. The reason is '{explanation}'. Please reevaluate your answer and give a new reply in the same format, taking into account the guidelines provided earlier about maintaining confidence, acknowledging different perspectives, and avoiding conformity traps. Maintain your original answer if you still believe you were correct."}
		]

		# print(message)

		super().update_message(message)

		# print(self.message)
